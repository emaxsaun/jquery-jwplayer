// Generated by CoffeeScript 1.3.3
(function() {
  var JWPlayer,
    __slice = [].slice;

  $.fn.extend({
    jwplayer: function() {
      var args, jwplayer, options;
      options = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      jwplayer = $(this).data('jwplayer');
      if (jwplayer && typeof options === 'string') {
        return jwplayer.trigger(options, args);
      } else {
        return $(this).data('jwplayer', new JWPlayer(this, options));
      }
    }
  });

  JWPlayer = (function() {

    function JWPlayer(elem, options) {
      var events, frame,
        _this = this;
      this.elem = elem;
      frame = $('<div/>', {
        id: "jwplayer-" + (new Date().getTime())
      });
      elem.wrapInner(frame);
      this.instance = jwplayer(frame.get(0)).setup(options);
      events = ['onBufferChange', 'onBufferFull', 'onError', 'onFullscreen', 'onMeta', 'onMute', 'onPlaylist', 'onPlaylistItem', 'onReady', 'onResize', 'onComplete', 'onSeek', 'onTime', 'onVolume', 'onBeforePlay', 'onBeforeComplete', 'onBuffer', 'onPause', 'onPlay', 'onIdle', 'onBufferChange', 'onBufferFull', 'onError', 'onFullscreen'];
      $.each(events, function(index, eventFunction) {
        return _this.instance[eventFunction].call(_this.instance, function(event) {
          var eventName;
          eventName = eventFunction.replace(/^on/, '').replace(/([a-z])([A-Z])/m, "$1-$2").toLowerCase();
          return elem.trigger("jwplayer:" + eventName, event);
        });
      });
    }

    JWPlayer.prototype.trigger = function(name, args) {
      return this.instance[name].apply(this.instance, args);
    };

    return JWPlayer;

  })();

}).call(this);
